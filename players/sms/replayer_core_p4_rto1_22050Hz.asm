;----------------------------------------------------------------------------
; Copyright (C) 2006 Arturo Ragozini and Daniel Vik
;
; This software is provided 'as-is', without any express or implied
; warranty. In no event will the authors be held liable for any damages
; arising from the use of this software.
;
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
;
; 1. The origin of this software must not be misrepresented; you must not
; claim that you wrote the original software. If you use this software
; in a product, an acknowledgment in the product documentation would be
; appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
; misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;----------------------------------------------------------------------------

; Modified in 2016 by Maxim for operation on Sega 8-bit consoles (and similar 
; hardware with IO-mapped SN76489 variants)

;
; Replayer core to play RLE encoded 22050Hz samples generated by pcmenc
;
; pcmenc should use the following command line arguments:
;
; pcmenc -rto 1 -p 4 -dt1 12 -dt2 12 -dt3 141 file.wav
;
; and optionally -r to split sample into blocks for rom replayer
;

; There are three channel updates per underlying sample.
; We emit three channel updates together, as fast as possible,
; every 165 cycles, to match an underlying sample at 22028Hz
; (3579545/165=21694).

;-------------------------------------
; Plays one sample
; HL - pointes to triplet count followed by data
;-------------------------------------
PLAY_SAMPLE:
  ld a, (hl)
  ld ixl, a
  inc hl
  ld a, (hl)
  ld ixh, a
  inc hl
  ld c, $7f ; for out (c),r

  ; We have two halves to the loop, due to the lack of symmetry between
  ; the nibbles used each time. We also unroll half of a loop,
  ; in order to help equalise the loops (pairing the expensive
  ; jump with the less costly data retrieval).

  rld               ; 18
  and $0f           ;  7
  or (0 << 5) | $90 ;  7
  ld d, a           ;  4
  ld a,(hl)         ;  7
  inc hl            ;  6
  and $0f           ;  7
  or (1 << 5) | $90 ;  7
  ld e, a           ;  4
  rld               ; 18
  and $0f           ;  7
  or (2 << 5) | $90 ;  7
  out (c),d         ; 12 <-- 0
  out (c),e         ; 12 <-- 1
  out ($7f),a       ; 11 <-- 2
  ; ====================================
  dec ix            ; 10
  ld a,ixh          ;  8
  or ixl            ;  8
  ret z             ;  5
  ret z             ;  5 ; time wasting to equalise lengths
  
PsgLoop:
  ld a,(hl)         ;  7
  inc hl            ;  6
  and $0f           ;  7
  or (0 << 5) | $90 ;  7
  ld d, a           ;  4
  rld               ; 18
  and $0f           ;  7
  or (1 << 5) | $90 ;  7
  ld e, a           ;  4
  ld a,(hl)         ;  7
  inc hl            ;  6
  and $0f           ;  7
  or (2 << 5) | $90 ;  7
  out (c),d         ; 12 <-- 0
  out (c),e         ; 12 <-- 1
  out ($7f),a       ; 11 <-- 2 (165 cycles)
  ; ====================================
  dec ix            ; 10
  ld a,ixh          ;  8
  or ixl            ;  8
  ret z             ;  5

  rld               ; 18
  and $0f           ;  7
  or (0 << 5) | $90 ;  7
  ld d, a           ;  4
  ld a,(hl)         ;  7
  inc hl            ;  6
  and $0f           ;  7
  or (1 << 5) | $90 ;  7
  ld e, a           ;  4
  rld               ; 18
  and $0f           ;  7
  or (2 << 5) | $90 ;  7
  out (c),d         ; 12 <-- 0
  out (c),e         ; 12 <-- 1
  out ($7f),a       ; 11 <-- 2 (165 cycles)
  ; ====================================
  dec ix            ; 10
  ld a,ixh          ;  8
  or ixl            ;  8
  jp nz, PsgLoop    ; 10
  ret
